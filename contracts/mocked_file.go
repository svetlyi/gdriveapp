// Code generated by MockGen. DO NOT EDIT.
// Source: contracts/file.go

// Package contracts is a generated GoMock package.
package contracts

import (
	gomock "github.com/golang/mock/gomock"
	io "io"
	reflect "reflect"
)

// MockFile is a mock of File interface
type MockFile struct {
	ctrl     *gomock.Controller
	recorder *MockFileMockRecorder
}

// MockFileMockRecorder is the mock recorder for MockFile
type MockFileMockRecorder struct {
	mock *MockFile
}

// NewMockFile creates a new mock instance
func NewMockFile(ctrl *gomock.Controller) *MockFile {
	mock := &MockFile{ctrl: ctrl}
	mock.recorder = &MockFileMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFile) EXPECT() *MockFileMockRecorder {
	return m.recorder
}

// IsDeleted mocks base method
func (m *MockFile) IsDeleted() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDeleted")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsDeleted indicates an expected call of IsDeleted
func (mr *MockFileMockRecorder) IsDeleted() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDeleted", reflect.TypeOf((*MockFile)(nil).IsDeleted))
}

// IsChanged mocks base method
func (m *MockFile) IsChanged() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsChanged")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsChanged indicates an expected call of IsChanged
func (mr *MockFileMockRecorder) IsChanged() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsChanged", reflect.TypeOf((*MockFile)(nil).IsChanged))
}

// GetName mocks base method
func (m *MockFile) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName
func (mr *MockFileMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockFile)(nil).GetName))
}

// GetRelativePath mocks base method
func (m *MockFile) GetRelativePath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelativePath")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetRelativePath indicates an expected call of GetRelativePath
func (mr *MockFileMockRecorder) GetRelativePath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelativePath", reflect.TypeOf((*MockFile)(nil).GetRelativePath))
}

// GetFullPath mocks base method
func (m *MockFile) GetFullPath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFullPath")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetFullPath indicates an expected call of GetFullPath
func (mr *MockFileMockRecorder) GetFullPath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFullPath", reflect.TypeOf((*MockFile)(nil).GetFullPath))
}

// GetParentFullPath mocks base method
func (m *MockFile) GetParentFullPath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParentFullPath")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetParentFullPath indicates an expected call of GetParentFullPath
func (mr *MockFileMockRecorder) GetParentFullPath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParentFullPath", reflect.TypeOf((*MockFile)(nil).GetParentFullPath))
}

// GetReader mocks base method
func (m *MockFile) GetReader() (io.Reader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReader")
	ret0, _ := ret[0].(io.Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReader indicates an expected call of GetReader
func (mr *MockFileMockRecorder) GetReader() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReader", reflect.TypeOf((*MockFile)(nil).GetReader))
}

// GetHash mocks base method
func (m *MockFile) GetHash() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHash")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHash indicates an expected call of GetHash
func (mr *MockFileMockRecorder) GetHash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHash", reflect.TypeOf((*MockFile)(nil).GetHash))
}

// IsFolder mocks base method
func (m *MockFile) IsFolder() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFolder")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsFolder indicates an expected call of IsFolder
func (mr *MockFileMockRecorder) IsFolder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFolder", reflect.TypeOf((*MockFile)(nil).IsFolder))
}
